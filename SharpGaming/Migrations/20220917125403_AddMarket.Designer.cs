// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharpGaming.Data;

namespace SharpGaming.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220917125403_AddMarket")]
    partial class AddMarket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SharpGaming.Models.CountryModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SharpGaming.Models.EachWay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("denominator")
                        .HasColumnType("int");

                    b.Property<bool>("enabled")
                        .HasColumnType("bit");

                    b.Property<int>("numerator")
                        .HasColumnType("int");

                    b.Property<int>("places")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("EachWay");
                });

            modelBuilder.Entity("SharpGaming.Models.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<string>("dateStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isLive")
                        .HasColumnType("bit");

                    b.Property<bool>("isRacingEvent")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("outright")
                        .HasColumnType("bit");

                    b.Property<int>("sportId")
                        .HasColumnType("int");

                    b.Property<int?>("teamsid")
                        .HasColumnType("int");

                    b.Property<int>("tournamentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("teamsid");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SharpGaming.Models.Market", b =>
                {
                    b.Property<int>("eventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("eachWayid")
                        .HasColumnType("int");

                    b.Property<string>("marketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marketName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marketTranslation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("eventId");

                    b.HasIndex("eachWayid");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("SharpGaming.Models.RacingInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("allowBog")
                        .HasColumnType("bit");

                    b.Property<bool>("allowSP")
                        .HasColumnType("bit");

                    b.Property<bool>("onlySP")
                        .HasColumnType("bit");

                    b.Property<int>("priceType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("RacingInfo");
                });

            modelBuilder.Entity("SharpGaming.Models.Selection", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MarketeventId")
                        .HasColumnType("int");

                    b.Property<string>("american")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("decimal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("denominator")
                        .HasColumnType("int");

                    b.Property<int?>("eachWayid")
                        .HasColumnType("int");

                    b.Property<string>("fraction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("frozen")
                        .HasColumnType("bit");

                    b.Property<int>("numerator")
                        .HasColumnType("int");

                    b.Property<int>("participantId")
                        .HasColumnType("int");

                    b.Property<int?>("racingInfoid")
                        .HasColumnType("int");

                    b.Property<string>("selectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("selectionName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("selectionNameTranslation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("selectionNameTranslation2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("MarketeventId");

                    b.HasIndex("eachWayid");

                    b.HasIndex("racingInfoid");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("SharpGaming.Models.SportModel", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("SharpGaming.Models.Teams", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("away")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("awayTranslation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("home")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("homeTranslation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SharpGaming.Models.Tournament", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.Property<int>("live")
                        .HasColumnType("int");

                    b.Property<DateTime?>("meetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("preMatch")
                        .HasColumnType("int");

                    b.Property<int>("sportId")
                        .HasColumnType("int");

                    b.Property<string>("translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("SharpGaming.Models.Event", b =>
                {
                    b.HasOne("SharpGaming.Models.Teams", "teams")
                        .WithMany()
                        .HasForeignKey("teamsid");

                    b.Navigation("teams");
                });

            modelBuilder.Entity("SharpGaming.Models.Market", b =>
                {
                    b.HasOne("SharpGaming.Models.EachWay", "eachWay")
                        .WithMany()
                        .HasForeignKey("eachWayid");

                    b.Navigation("eachWay");
                });

            modelBuilder.Entity("SharpGaming.Models.Selection", b =>
                {
                    b.HasOne("SharpGaming.Models.Market", null)
                        .WithMany("selections")
                        .HasForeignKey("MarketeventId");

                    b.HasOne("SharpGaming.Models.EachWay", "eachWay")
                        .WithMany()
                        .HasForeignKey("eachWayid");

                    b.HasOne("SharpGaming.Models.RacingInfo", "racingInfo")
                        .WithMany()
                        .HasForeignKey("racingInfoid");

                    b.Navigation("eachWay");

                    b.Navigation("racingInfo");
                });

            modelBuilder.Entity("SharpGaming.Models.Market", b =>
                {
                    b.Navigation("selections");
                });
#pragma warning restore 612, 618
        }
    }
}
